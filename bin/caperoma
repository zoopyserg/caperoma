#!/usr/bin/env ruby
# frozen_string_literal: true

require 'caperoma'

def help
  puts File.read(File.join(File.dirname(__FILE__), '..', 'HELP'))
end

def test_connection(_id= nil, _password = nil)
  # task = Task.where.not(pivotal_id: nil).where.not(jira_key: nil).last
  project = Project.first
  task = Task.new(jira_key: 'CAP-11', pivotal_id: '167498567', project_id: project.id)

  pp 'pivotal'
  conn = Faraday.new(url: 'https://www.pivotaltracker.com/') do |c|
    c.adapter Faraday.default_adapter
  end

  response = conn.get do |request|
    request.url "services/v5/stories/#{_id ? _id : task.pivotal_id}"
    request.headers['User-Agent'] = 'Caperoma'
    request.headers['Content-Type'] = 'application/json'
    request.headers['X-TrackerToken'] = _password ? _password : Account.pivotal.password
  end
  pp response.status
  pp response.reason_phrase
  pp JSON.parse response.body
  pp ''

  pp 'jira'
  conn = Faraday.new(url: task.project.jira_url) do |c|
    c.basic_auth(Account.jira.email, _password ? _password : Account.jira.password)
    c.adapter Faraday.default_adapter
  end

  response = conn.get do |request|
    request.url "rest/api/3/issue/#{_id ? _id : task.jira_key}/transitions"
    request.headers['User-Agent'] = 'Caperoma'
    request.headers['Content-Type'] = 'application/json'
  end
  
  pp response.status
  pp response.reason_phrase
  pp JSON.parse response.body
  pp ''

  pp 'git'
  conn = Faraday.new(url: 'https://api.github.com') do |c|
    c.basic_auth(Account.git.email, _password ? _password : Account.git.password)
    c.adapter Faraday.default_adapter
  end

  response = conn.get do |request|
    request.url "/repos/#{_id ? _id : task.project.github_repo}/pulls"
    request.headers['User-Agent'] = 'Caperoma'
    request.headers['Accept'] = 'application/vnd.github.v3+json'
    request.headers['Content-Type'] = 'application/json'
  end

  pp response.status
  pp response.reason_phrase
  pp JSON.parse response.body
  pp ''
end

case ARGV[0] # action
when 'setup'
  Caperoma.setup
when 'get_jira_issue_type_ids'
  Caperoma.get_jira_issue_type_ids
when 'get_jira_transition_ids'
  Caperoma.get_jira_transition_ids
when 'init'
  Caperoma.init
when 'copy_airbrake_emails_to_pivotal'
  AirbrakeEmailProcessor.new.process
when 'projects'
  Project.all.each { |project| puts "#{project.id}) #{project.folder_path} (jira_project_id: #{project.jira_project_id}, pivotal_tracker_project_id: #{project.pivotal_tracker_project_id})" }
when 'get_jira_project_ids'
  Caperoma.get_jira_project_ids
when 'from_pivotal' # removing
  puts 'Starting a task from Pivotal'
  action, story_id = ARGV
  PivotalFetcher.process(story_id)
  puts 'A task from Pivotal is started'
when /^(chore|bug|feature|fix|meeting)$/
  Caperoma.create_task(ARGV)
when 'finish'
  Task.finish_started(ARGV[1])
when 'pause'
  Task.pause_started(ARGV[1])
when 'abort'
  Task.abort_started(ARGV[1])
when 'abort_without_time'
  Task.abort_started_without_time(ARGV[1])
when 'accounts'
  Caperoma.manage_accounts(ARGV)
when /^(status)$/
  Task.status
when /^(delete_history)$/
  Caperoma.drop_db
when /^(version|-v)$/
  puts Caperoma::Version::STRING
when /^(help|-h)$/
  help
when 'recipients'
  Caperoma.manage_recipients(ARGV)
when 'report'
  Caperoma.manage_reports(ARGV)
when 'delete_tasks'
  Task.destroy_all
when 'test_good_connection'
  test_connection
when 'test_not_authorized_connection'
  test_connection(nil, 'invalid password')
when 'test_not_found_connection'
  test_connection('invalid-resource', nil)
else
  help
end
